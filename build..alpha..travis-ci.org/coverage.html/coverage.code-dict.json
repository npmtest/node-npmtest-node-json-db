{"/home/travis/build/npmtest/node-npmtest-node-json-db/test.js":"/* istanbul instrument in package npmtest_node_json_db */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-json-db/lib.npmtest_node_json_db.js":"/* istanbul instrument in package npmtest_node_json_db */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_json_db = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_json_db = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-json-db/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-json-db && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_json_db */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_json_db\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_json_db.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_json_db.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_json_db.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_json_db.__dirname + '/lib.npmtest_node_json_db.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-json-db/node_modules/node-json-db/JsonDB.js":"(function () {\r\n    \"use strict\";\r\n    var FS = require('fs');\r\n    var events = require('events');\r\n    var JsonUtils = require(\"./lib/utils\");\r\n    var DBParentData = require(\"./lib/DBParentData\");\r\n    var DatabaseError = require(\"./lib/Errors\").DatabaseError;\r\n    var DataError = require(\"./lib/Errors\").DataError;\r\n    var mkdirp = require('mkdirp');\r\n    var path = require('path');\r\n\r\n    /**\r\n     * Create the JSON database\r\n     * @param filename where to save the data base\r\n     * @param saveOnPush saving on modification of the data\r\n     * @param humanReadable is the json file humand readable \r\n     * @returns {JsonDB}\r\n     * @constructor\r\n     */\r\n    var JsonDB = function (filename, saveOnPush, humanReadable) {\r\n\r\n        this.filename = filename;\r\n\r\n        if (!JsonUtils.strEndWith(filename, \".json\")) {\r\n            this.filename += \".json\";\r\n        }\r\n        var self = this;\r\n        this.loaded = false;\r\n        this.data = {};\r\n        if (!FS.existsSync(this.filename)) {\r\n            var dirname = path.dirname(this.filename);\r\n            mkdirp.sync(dirname);\r\n            self.save(true);\r\n            self.loaded = true;\r\n        }\r\n        this.saveOnPush = ( typeof( saveOnPush ) == \"boolean\" ) ? saveOnPush : true;\r\n        if (humanReadable) {\r\n            this.humanReadable = humanReadable;\r\n        }\r\n        else {\r\n            this.humanReadable = false;\r\n        }\r\n\r\n        return this;\r\n    };\r\n    JsonDB.prototype._processDataPath = function (dataPath) {\r\n        if (dataPath === undefined || !dataPath.trim()) {\r\n            throw new DataError(\"The Data Path can't be empty\", 6);\r\n        }\r\n        if (dataPath == \"/\") {\r\n            return [];\r\n        }\r\n        var path = dataPath.split(\"/\");\r\n        path.shift();\r\n        return path;\r\n    };\r\n\r\n    JsonDB.prototype._getParentData = function (dataPath, create) {\r\n        var path = this._processDataPath(dataPath);\r\n        var last = path.pop();\r\n        return new DBParentData(last, this._getData(path, create), this, dataPath);\r\n    };\r\n    /**\r\n     * Get the deta stored in the data base\r\n     * @param dataPath path leading to the data\r\n     * @returns {*}\r\n     */\r\n    JsonDB.prototype.getData = function (dataPath) {\r\n        var path = this._processDataPath(dataPath);\r\n        return this._getData(path);\r\n    };\r\n\r\n    JsonDB.prototype._getData = function (dataPath, create) {\r\n\r\n        this.load();\r\n\r\n        create = create || false;\r\n        dataPath = JsonUtils.removeTrailingSlash(dataPath);\r\n\r\n        function recursiveProcessDataPath(data, index) {\r\n\r\n            var property = dataPath[index];\r\n\r\n\r\n            /**\r\n             * Find the wanted Data or create it.\r\n             */\r\n            function findData(isArray) {\r\n                isArray = isArray || false;\r\n                if (data.hasOwnProperty(property)) {\r\n                    data = data[property];\r\n                } else if (create) {\r\n                    if (isArray) {\r\n                        data[property] = [];\r\n                    } else {\r\n                        data[property] = {};\r\n                    }\r\n                    data = data[property];\r\n                } else {\r\n                    throw new DataError(\"Can't find dataPath: /\" + dataPath.join(\"/\") + \". Stopped at \" + property, 5);\r\n                }\r\n            }\r\n\r\n            var arrayInfo = JsonUtils.processArray(property);\r\n            if (arrayInfo) {\r\n                property = arrayInfo.property;\r\n                findData(true);\r\n                if (!Array.isArray(data)) {\r\n                    throw new DataError(\"DataPath: /\" + dataPath.join(\"/\") + \". \" + property + \" is not an array.\", 11);\r\n                }\r\n                var arrayIndex = arrayInfo.getIndex(data, true);\r\n                if (data.hasOwnProperty(arrayIndex)) {\r\n                    data = data[arrayIndex];\r\n                } else if (create) {\r\n                    if (arrayInfo.append) {\r\n                        data.push({});\r\n                        data = data[data.length - 1];\r\n                    }\r\n                    else {\r\n                        data[arrayIndex] = {};\r\n                        data = data[arrayIndex];\r\n                    }\r\n                } else {\r\n                    throw new DataError(\"DataPath: /\" + dataPath.join(\"/\") + \". Can't find index \" + arrayInfo.index + \" in array \" + property, 10);\r\n                }\r\n            } else {\r\n                findData();\r\n            }\r\n\r\n            if (dataPath.length == ++index) {\r\n                return data;\r\n            }\r\n            return recursiveProcessDataPath(data, index);\r\n        }\r\n\r\n        if (dataPath.length === 0) {\r\n            return this.data;\r\n        }\r\n\r\n        return recursiveProcessDataPath(this.data, 0);\r\n\r\n    };\r\n\r\n    /**\r\n     * Pushing data into the database\r\n     * @param dataPath path leading to the data\r\n     * @param data data to push\r\n     * @param override overriding or not the data, if not, it will merge them\r\n     */\r\n    JsonDB.prototype.push = function (dataPath, data, override) {\r\n        override = override === undefined ? true : override;\r\n\r\n        dataPath = JsonUtils.removeTrailingSlash(dataPath);\r\n        var dbData = this._getParentData(dataPath, true);\r\n        if (!dbData) {\r\n            throw new Error(\"Data not found\");\r\n        }\r\n        var toSet = data;\r\n        if (!override) {\r\n            if (Array.isArray(data)) {\r\n                var storedData = dbData.getData();\r\n                if (storedData === undefined) {\r\n                    storedData = [];\r\n                } else if (!Array.isArray(storedData)) {\r\n                    throw new DataError(\"Can't merge another type of data with an Array\", 3);\r\n                }\r\n                toSet = storedData.concat(data);\r\n            } else if (data === Object(data)) {\r\n                if (Array.isArray(dbData.getData())) {\r\n                    throw  new DataError(\"Can't merge an Array with an Object\", 4);\r\n                }\r\n                toSet = JsonUtils.mergeObject(dbData.getData(), data);\r\n            }\r\n        }\r\n        dbData.setData(toSet);\r\n\r\n        if (this.saveOnPush) {\r\n            this.save();\r\n        }\r\n    };\r\n    /**\r\n     * Delete the data\r\n     * @param dataPath path leading to the data\r\n     */\r\n    JsonDB.prototype.delete = function (dataPath) {\r\n        dataPath = JsonUtils.removeTrailingSlash(dataPath);\r\n        var dbData = this._getParentData(dataPath, true);\r\n        if (!dbData) {\r\n            return;\r\n        }\r\n        dbData.delete();\r\n        \r\n        if (this.saveOnPush) {\r\n            this.save();\r\n        }\r\n    };\r\n    /**\r\n     * Reload the database from the file\r\n     * @returns {*}\r\n     */\r\n    JsonDB.prototype.reload = function () {\r\n        this.loaded = false;\r\n        return this.load();\r\n    };\r\n    /**\r\n     * Manually load the database\r\n     * It is automatically called when the first getData is done\r\n     */\r\n    JsonDB.prototype.load = function () {\r\n        if (this.loaded) {\r\n            return;\r\n        }\r\n        try {\r\n            var data = FS.readFileSync(this.filename, 'utf8');\r\n            this.data = JSON.parse(data);\r\n            this.loaded = true;\r\n        } catch (err) {\r\n            var error = new DatabaseError(\"Can't Load Database\", 1, err);\r\n            error.inner = err;\r\n            throw error;\r\n        }\r\n    };\r\n    /**\r\n     * Manually save the database\r\n     * By default you can't save the database if it's not loaded\r\n     * @param force force the save of the database\r\n     */\r\n    JsonDB.prototype.save = function (force) {\r\n        force = force || false;\r\n        if (!force && !this.loaded) {\r\n            throw new DatabaseError(\"DataBase not loaded. Can't write\", 7);\r\n        }\r\n        var data = \"\";\r\n        try {\r\n            if (this.humanReadable) {\r\n                data = JSON.stringify(this.data, null, 4);\r\n            }\r\n            else {\r\n                data = JSON.stringify(this.data);\r\n            }\r\n            FS.writeFileSync(this.filename, data, 'utf8');\r\n        } catch (err) {\r\n            var error = new DatabaseError(\"Can't save the database\", 2, err);\r\n            error.inner = err;\r\n            throw error;\r\n        }\r\n\r\n    };\r\n\r\n    module.exports = JsonDB;\r\n})();\r\n","/home/travis/build/npmtest/node-npmtest-node-json-db/node_modules/node-json-db/lib/utils.js":"(function () {\r\n    \"use strict\";\r\n    var ArrayInfo = require('./ArrayInfo');\r\n    var arrayIndexRegex = /(.+)\\[(.+|)\\]/;\r\n    var endsWith = function (str, suffix) {\r\n        return str.indexOf(suffix, str.length - suffix.length) !== -1;\r\n    };\r\n    /**\r\n     * Check if the property want to access an Array\r\n     * @returns ArrayInfo|null\r\n     */\r\n    var processArray = function(property) {\r\n        var match = arrayIndexRegex.exec(property);\r\n        if (match != null) {\r\n            return new ArrayInfo(match[1], match[2]);\r\n        }\r\n        return null;\r\n    };\r\n//\r\n// Code from: https://github.com/rxaviers/cldr\r\n//\r\n    var merge = function () {\r\n        var destination = {},\r\n            sources = [].slice.call(arguments, 0);\r\n        sources.forEach(function (source) {\r\n            var prop;\r\n            for (prop in source) {\r\n\r\n                if (prop in destination && destination[prop] === null) {\r\n                    destination[prop] = source[prop];\r\n                }\r\n                else if (prop in destination && Array.isArray(destination[prop])) {\r\n\r\n                    // Concat Arrays\r\n                    destination[prop] = destination[prop].concat(source[prop]);\r\n\r\n                } else if (prop in destination && typeof destination[prop] === \"object\") {\r\n\r\n                    // Merge Objects\r\n                    destination[prop] = merge(destination[prop], source[prop]);\r\n\r\n                } else {\r\n\r\n                    // Set new values\r\n                    destination[prop] = source[prop];\r\n\r\n                }\r\n            }\r\n        });\r\n        return destination;\r\n    };\r\n\r\n    function removeTrailingSlash(dataPath) {\r\n        if(dataPath.length > 1 && endsWith(dataPath,\"/\")) {\r\n            return dataPath.substring(0, dataPath.length - 1);\r\n        }\r\n        return dataPath;\r\n    }\r\n    module.exports = {\r\n        strEndWith: endsWith,\r\n        mergeObject: merge,\r\n        processArray: processArray,\r\n        removeTrailingSlash : removeTrailingSlash\r\n    }\r\n})();","/home/travis/build/npmtest/node-npmtest-node-json-db/node_modules/node-json-db/lib/ArrayInfo.js":"/**\r\n * Created by Antoine on 20/02/2016.\r\n */\r\n(function () {\r\n    \"use strict\";\r\n    var DataError = require(\"../lib/Errors\").DataError;\r\n\r\n    function isInt(value) {\r\n        return !isNaN(value) &&\r\n            parseInt(Number(value)) == value && !isNaN(parseInt(value, 10));\r\n    }\r\n\r\n\r\n    function ArrayInfo(property, index) {\r\n        this.property = property;\r\n        this.index = index;\r\n        this.append = index === \"\";\r\n        if (isInt(this.index)) {\r\n            this.index = parseInt(this.index);\r\n        } else if (!this.append) {\r\n            throw new DataError(\"Only numerical values accepted for array index\", 200)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the index for the array\r\n     * @param data\r\n     * @param avoidProperty\r\n     * @returns {*}\r\n     */\r\n    ArrayInfo.prototype.getIndex = function (data, avoidProperty) {\r\n        if (avoidProperty === undefined) {\r\n            avoidProperty = false;\r\n        }\r\n        var index = this.index;\r\n        if (index == -1) {\r\n            var dataIterable = avoidProperty ? data : data[this.property];\r\n\r\n            if (dataIterable.length === 0) {\r\n                return 0;\r\n            }\r\n            return dataIterable.length - 1;\r\n        }\r\n        return index;\r\n    };\r\n\r\n    /**\r\n     * Get the Data\r\n     * @param data\r\n     * @returns {*}\r\n     * @constructor\r\n     */\r\n    ArrayInfo.prototype.getData = function (data) {\r\n        if (this.append) {\r\n            throw new DataError(\"Can't get data when appending\", 100);\r\n        }\r\n        var index = this.getIndex(data);\r\n        return data[this.property][index];\r\n    };\r\n\r\n    /**\r\n     * Set the data for the array\r\n     * @param data\r\n     * @param value\r\n     */\r\n    ArrayInfo.prototype.setData = function (data, value) {\r\n        if (this.append) {\r\n            data[this.property].push(value);\r\n        } else {\r\n            var index = this.getIndex(data);\r\n            data[this.property][index] = value;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Delete the index from the array\r\n     * @param data\r\n     */\r\n    ArrayInfo.prototype.delete = function (data) {\r\n        var index = this.getIndex(data);\r\n        data[this.property].splice(index, 1);\r\n    };\r\n\r\n    /**\r\n     * Check if the ArrayInfo is valid for the given data\r\n     * @param data\r\n     * @returns {boolean}\r\n     * @constructor\r\n     */\r\n    ArrayInfo.prototype.isValid = function (data) {\r\n        var index = this.getIndex(data);\r\n        return data[this.property].hasOwnProperty(index);\r\n    };\r\n\r\n\r\n    module.exports = ArrayInfo;\r\n})();","/home/travis/build/npmtest/node-npmtest-node-json-db/node_modules/node-json-db/lib/Errors.js":"(function () {\r\n    \"use strict\";\r\n    var util = require(\"util\");\r\n\r\n\r\n    function NestedError(msg, id, nested) {\r\n        var tmp = Error.apply(this, arguments);\r\n        tmp.name = this.name = 'NestedError';\r\n\r\n        this.stack = tmp.stack;\r\n        this.message = tmp.message;\r\n        this.inner = nested;\r\n        this.id = id;\r\n        return this;\r\n    }\r\n\r\n    util.inherits(NestedError, Error);\r\n\r\n    NestedError.prototype.toString = function () {\r\n        var string = this.name + \": \" + this.message;\r\n        if (this.inner) {\r\n            return string + ':\\n' + this.inner;\r\n        }\r\n        return string;\r\n    }\r\n\r\n\r\n    function DatabaseError(msg, id, nested) {\r\n        var error = NestedError.call(this, msg, id, nested);\r\n        error.name = 'DatabaseError';\r\n        return error;\r\n    }\r\n\r\n    util.inherits(DatabaseError, NestedError);\r\n\r\n    function DataError(msg, id, nested) {\r\n        var error = NestedError.call(this, msg, id, nested);\r\n        error.name = 'DataError';\r\n        return error;\r\n    }\r\n\r\n    util.inherits(DataError, NestedError);\r\n\r\n\r\n    exports = module.exports = {\r\n        DatabaseError: DatabaseError,\r\n        DataError: DataError\r\n    }\r\n})();\r\n","/home/travis/build/npmtest/node-npmtest-node-json-db/node_modules/node-json-db/lib/DBParentData.js":"(function () {\r\n    \"use strict\";\r\n    var JsonUtils = require('./utils');\r\n    var DataError = require(\"../lib/Errors\").DataError;\r\n\r\n\r\n    function DBParentData(parent, data, jsonDB, dataPath) {\r\n        this.parent = parent;\r\n        this.data = data;\r\n        this.db = jsonDB;\r\n        this.dataPath = dataPath;\r\n\r\n    }\r\n\r\n    /**\r\n     * Check if the array is valid for the wanted use\r\n     * @param deletion\r\n     * @returns {ArrayInfo}\r\n     * @private\r\n     */\r\n    DBParentData.prototype._checkArray = function (deletion) {\r\n        if(typeof deletion === undefined) {\r\n            deletion = false;\r\n        }\r\n        var arrayInfo = JsonUtils.processArray(this.parent);\r\n        if (arrayInfo) {\r\n            if ((!arrayInfo.append || deletion) && !arrayInfo.isValid(this.data)) {\r\n                throw new DataError(\"DataPath: /\" + this.dataPath + \". Can't find index \" + arrayInfo.index + \" in array \" + arrayInfo.property, 10);\r\n            }\r\n        }\r\n        return arrayInfo;\r\n    };\r\n\r\n    DBParentData.prototype.getData = function () {\r\n        if (this.parent === undefined) {\r\n            return this.data;\r\n        }\r\n        var arrayInfo = this._checkArray();\r\n        if (arrayInfo) {\r\n            return arrayInfo.getData(this.data);\r\n        } else {\r\n            return this.data[this.parent];\r\n        }\r\n    };\r\n\r\n    DBParentData.prototype.setData = function (toSet) {\r\n        if (this.parent === undefined) {\r\n            this.db.data = toSet;\r\n            return;\r\n        }\r\n        var arrayInfo = JsonUtils.processArray(this.parent);\r\n        if (arrayInfo) {\r\n            if (!this.data.hasOwnProperty(arrayInfo.property)) {\r\n                this.data[arrayInfo.property] = [];\r\n            } else if (!Array.isArray(this.data[arrayInfo.property])) {\r\n                throw new DataError(\"DataPath: /\" + this.dataPath + \". \" + arrayInfo.property + \" is not an array.\", 11);\r\n            }\r\n            arrayInfo.setData(this.data, toSet);\r\n        } else {\r\n            this.data[this.parent] = toSet;\r\n        }\r\n    };\r\n\r\n    DBParentData.prototype.delete = function () {\r\n        if (this.parent === undefined) {\r\n            this.db.data = {};\r\n        }\r\n        var arrayInfo = this._checkArray(true);\r\n        if (arrayInfo) {\r\n            arrayInfo.delete(this.data);\r\n        } else {\r\n            delete this.data[this.parent];\r\n        }\r\n    };\r\n\r\n    module.exports = DBParentData;\r\n})();","/home/travis/build/npmtest/node-npmtest-node-json-db/node_modules/node-json-db/Gruntfile.js":"/**\r\n * Copyright 2013, 2014 IBM Corp.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n **/\r\n\r\nmodule.exports = function(grunt) {\r\n    \r\n    // Project configuration.\r\n    grunt.initConfig({\r\n            pkg: grunt.file.readJSON('package.json'),\r\n            simplemocha: {\r\n                options: {\r\n                    globals: ['expect'],\r\n                    timeout: 3000,\r\n                    ignoreLeaks: false,\r\n                    ui: 'bdd',\r\n                    reporter: 'tap'\r\n                },\r\n                all: { src: ['test/*.js'] }\r\n            },\r\n            jshint: {\r\n                options: {\r\n                    // http://www.jshint.com/docs/options/\r\n                    \"asi\": true,      // allow missing semicolons\r\n                    \"curly\": true,    // require braces\r\n                    \"eqnull\": true,   // ignore ==null\r\n                    \"forin\": true,    // require property filtering in \"for in\" loops\r\n                    \"immed\": true,    // require immediate functions to be wrapped in ( )\r\n                    \"nonbsp\": true,   // warn on unexpected whitespace breaking chars\r\n                    \"strict\": true, // commented out for now as it causes 100s of warnings, but want to get there eventually\r\n                    \"loopfunc\": true, // allow functions to be defined in loops\r\n                    \"sub\": true       // don't warn that foo['bar'] should be written as foo.bar\r\n                },\r\n                all: [\r\n                    'Gruntfile.js',\r\n                    'JsonDB.js',\r\n                    'lib/*.js'\r\n                ],               \r\n                lib: {\r\n                    files: {\r\n                        src: [ 'lib/*.js' ]\r\n                    }\r\n                },\r\n                module: {\r\n                    files: {\r\n                        src: [\r\n                            'JsonDB.js'\r\n                        ]\r\n                    }\r\n                },                \r\n                tests: {\r\n                    files: {\r\n                        src: ['test/*.js']\r\n                    },\r\n                    options: {\r\n                        \"expr\": true\r\n                    }\r\n                }\r\n                \r\n            }\r\n    });\r\n    \r\n    grunt.loadNpmTasks('grunt-simple-mocha');\r\n    grunt.loadNpmTasks('grunt-contrib-jshint');\r\n    \r\n    grunt.registerTask('default', ['jshint:lib','jshint:module','simplemocha']);\r\n    grunt.registerTask('all', ['jshint:tests','default']);\r\n    \r\n};\r\n"}